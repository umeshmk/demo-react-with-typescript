{"version":3,"sources":["components/List.tsx","components/RegisterForm.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["List","member","className","map","m","src","avatar","alt","name","age","message","RegisterForm","setMember","useState","field","setField","handleChange","e","target","value","type","placeholder","onChange","onClick","parseInt","App","members","setMembers","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kQA0BeA,EAvBgB,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAoBhC,OAAO,qBAAKC,UAAU,YAAf,SAlBED,EAAOE,KAAI,SAACC,GACjB,OACE,sBAAKF,UAAU,OAAf,UACE,gCACE,qBAAKA,UAAU,SAAf,SACE,qBAAKG,IAAKD,EAAEE,OAAQC,IAAI,OAE1B,qBAAKL,UAAU,OAAf,SAAuBE,EAAEI,OACzB,sBAAKN,UAAU,MAAf,mBAA4BE,EAAEK,UAEhC,qBAAKP,UAAU,UAAf,SACE,4BAAIE,EAAEM,qB,qBCyEHC,EAjFwB,SAAC,GAA2B,IAAzBV,EAAwB,EAAxBA,OAAQW,EAAgB,EAAhBA,UAAgB,EACtCC,mBAAS,CACjCL,KAAM,GACNC,IAAK,GACLH,OAAQ,GACRI,QAAS,KALqD,mBACzDI,EADyD,KAClDC,EADkD,KAQ1DC,EAAe,SACnBC,GAEAF,EAAS,2BACJD,GADG,kBAELG,EAAEC,OAAOV,KAAO,CAACS,EAAEC,OAAOC,WA8B/B,OACE,sBAAKjB,UAAU,gBAAf,UACE,uBACEkB,KAAK,OACLlB,UAAU,GACVmB,YAAY,OACZb,KAAK,OACLW,MAAOL,EAAMN,KACbc,SAAUN,IAEZ,uBACEI,KAAK,SACLlB,UAAU,GACVmB,YAAY,MACZb,KAAK,MACLW,MAAOL,EAAML,IACba,SAAUN,IAEZ,uBACEI,KAAK,OACLlB,UAAU,GACVmB,YAAY,aACZb,KAAK,SACLW,MAAOL,EAAMR,OACbgB,SAAUN,IAEZ,0BACEd,UAAU,GACVmB,YAAY,qBACZb,KAAK,UACLW,MAAOL,EAAMJ,QACbY,SAAUN,IAEZ,wBAAQO,QA3DQ,WACbT,EAAMN,MAASM,EAAMR,QAAWQ,EAAML,MAI3CG,EAAU,CACR,CACEJ,KAAMM,EAAMN,KACZC,IAAKe,SAASV,EAAML,KACpBH,OAAQQ,EAAMR,OACdI,QAASI,EAAMJ,UALV,mBAOJT,KAGLc,EAAS,CACPP,KAAM,GACNC,IAAK,GACLH,OAAQ,GACRI,QAAS,OAwCT,0BC1CSe,MA5Bf,WAAgB,IAAD,EACiBZ,mBAA2B,CACvD,CACEL,KAAM,QACNC,IAAK,GACLH,OAAQ,uDACRI,QAAS,sBAEX,CACEF,KAAM,SACNC,IAAK,GACLH,OACE,2FACFI,QAAS,wCAbA,mBACNgB,EADM,KACGC,EADH,KAiBb,OACE,sBAAKzB,UAAU,MAAf,UACE,oDAEA,cAAC,EAAD,CAAcD,OAAQyB,EAASd,UAAWe,IAC1C,8DACA,cAAC,EAAD,CAAM1B,OAAQyB,QCvBLE,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b31dd996.chunk.js","sourcesContent":["import React from \"react\";\nimport { IState as IProps } from \"../App\";\n\nconst List: React.FC<IProps> = ({ member }) => {\n  const renderList = (): JSX.Element[] => {\n    return member.map((m) => {\n      return (\n        <div className=\"list\">\n          <div>\n            <div className=\"avatar\">\n              <img src={m.avatar} alt=\"\" />\n            </div>\n            <div className=\"name\">{m.name}</div>\n            <div className=\"age\">Age : {m.age}</div>\n          </div>\n          <div className=\"message\">\n            <q>{m.message}</q>\n          </div>\n        </div>\n      );\n    });\n  };\n\n  return <div className=\"list-wrap\">{renderList()}</div>;\n};\n\nexport default List;\n","import React, { useState } from \"react\";\nimport { IState as Props } from \"../App\";\n\ninterface IProps {\n  member: Props[\"member\"];\n  setMember: React.Dispatch<React.SetStateAction<Props[\"member\"]>>;\n}\n\nconst RegisterForm: React.FC<IProps> = ({ member, setMember }) => {\n  const [field, setField] = useState({\n    name: \"\",\n    age: \"\",\n    avatar: \"\",\n    message: \"\",\n  });\n\n  const handleChange = (\n    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n  ): void => {\n    setField({\n      ...field,\n      [e.target.name]: [e.target.value],\n    });\n  };\n\n  const handleClick = (): void => {\n    if (!field.name || !field.avatar || !field.age) {\n      return;\n    }\n\n    setMember([\n      {\n        name: field.name,\n        age: parseInt(field.age),\n        avatar: field.avatar,\n        message: field.message,\n      },\n      ...member,\n    ]);\n\n    setField({\n      name: \"\",\n      age: \"\",\n      avatar: \"\",\n      message: \"\",\n    });\n  };\n  // const handleClick = (\n  //   e: React.MouseEvent<HTMLButtonElement, MouseEvent>\n  // ): void => {};\n\n  return (\n    <div className=\"register-wrap\">\n      <input\n        type=\"text\"\n        className=\"\"\n        placeholder=\"Name\"\n        name=\"name\"\n        value={field.name}\n        onChange={handleChange}\n      />\n      <input\n        type=\"number\"\n        className=\"\"\n        placeholder=\"Age\"\n        name=\"age\"\n        value={field.age}\n        onChange={handleChange}\n      />\n      <input\n        type=\"text\"\n        className=\"\"\n        placeholder=\"Avatar Url\"\n        name=\"avatar\"\n        value={field.avatar}\n        onChange={handleChange}\n      />\n      <textarea\n        className=\"\"\n        placeholder=\"Message (Optional)\"\n        name=\"message\"\n        value={field.message}\n        onChange={handleChange}\n      />\n      <button onClick={handleClick}>Register</button>\n    </div>\n  );\n};\n\nexport default RegisterForm;\n","import { useState } from \"react\";\nimport \"./App.css\";\nimport List from \"./components/List\";\nimport RegisterForm from \"./components/RegisterForm\";\n\nexport interface IState {\n  member: {\n    name: string;\n    age: number;\n    avatar: string;\n    message?: string;\n  }[];\n}\n\nfunction App() {\n  const [members, setMembers] = useState<IState[\"member\"]>([\n    {\n      name: \"umesh\",\n      age: 30,\n      avatar: \"https://avatars.githubusercontent.com/u/19268386?v=4\",\n      message: \"Ok. I'll be there.\",\n    },\n    {\n      name: \"Sachin\",\n      age: 44,\n      avatar:\n        \"https://c.ndtvimg.com/2021-03/u0812bl8_sachin-tendulkar-afp_625x300_27_March_21.jpg?q=60\",\n      message: \"Yeah Definately, I will be coming.\",\n    },\n  ]);\n\n  return (\n    <div className=\"App\">\n      <h1>Register For Event</h1>\n\n      <RegisterForm member={members} setMember={setMembers} />\n      <h1>Members Registered For Event</h1>\n      <List member={members} />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}